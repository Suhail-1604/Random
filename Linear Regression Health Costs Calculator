# Cell 1: Importing libraries
import pandas as pd
import numpy as np
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Embedding, LSTM, SpatialDropout1D
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report

# Cell 2: Load the data
url = 'https://raw.githubusercontent.com/dphi-official/Datasets/master/sms_spam_dataset/df_final.csv'
df = pd.read_csv(url)

# Cell 3: Data preprocessing and feature extraction
# Convert labels to numerical values
encoder = LabelEncoder()
df['Category'] = encoder.fit_transform(df['Category'])

# Tokenize the text data
max_features = 1000
tokenizer = Tokenizer(num_words=max_features, split=' ')
tokenizer.fit_on_texts(df['Message'].values)
X = tokenizer.texts_to_sequences(df['Message'].values)
X = pad_sequences(X)

# Splitting the dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, df['Category'].values, test_size=0.2, random_state=42)

# Cell 4: Define and train the neural network model
embedding_dim = 128
lstm_out = 196

model = Sequential()
model.add(Embedding(max_features, embedding_dim, input_length=X.shape[1]))
model.add(SpatialDropout1D(0.4))
model.add(LSTM(lstm_out, dropout=0.2, recurrent_dropout=0.2))
model.add(Dense(2, activation='softmax'))
model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

batch_size = 32
epochs = 10

model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, validation_data=(X_test, y_test))

# Cell 5: Create the predict_message function
def predict_message(message):
    seq = tokenizer.texts_to_sequences([message])
    padded = pad_sequences(seq, maxlen=X.shape[1])
    pred = model.predict(padded)
    pred_label = np.argmax(pred)
    labels = ['ham', 'spam']
    return [float(pred[0][pred_label]), labels[pred_label]]

# Cell 6: Test the model and function
test_messages = [
    "Free entry in 2 a wkly comp to win FA Cup final tkts 21st May 2005. Text FA to 87121 to receive entry question(std txt rate)T&C's apply 08452810075over18's",
    "Hey, what's up? Dinner at our place tonight?",
    "Congratulations! You've won a guaranteed $200 award or maybe even $1000 cash!",
    "Please don't forget to submit your report by tomorrow."
]

for msg in test_messages:
    prediction = predict_message(msg)
    print(f"Message: {msg}")
    print(f"Prediction: {prediction}\n")
